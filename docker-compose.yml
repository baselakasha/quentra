version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    platform: linux/arm64/v8
    container_name: quentra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-quentra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quentra_password}
      POSTGRES_DB: ${POSTGRES_DB:-quentra}
      PGDATA: /data/postgres
    volumes:
      - postgres-data:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-quentra}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    platform: linux/arm64/v8
    container_name: quentra-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${POSTGRES_USER:-quentra}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-quentra_password}
      DATABASE_NAME: ${POSTGRES_DB:-quentra}
      JWT_SECRET: ${JWT_SECRET:-development_secret_key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
    volumes:
      - ./api:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: yarn dev

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    platform: linux/arm64/v8
    container_name: quentra-frontend
    restart: unless-stopped
    depends_on:
      - api
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "4200:4200"
    command: yarn dev:docker

volumes:
  postgres-data:
